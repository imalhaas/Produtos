import { popperGenerator, detectOverflow } from "@popperjs/core/lib/createPopper/lib/createPopper"@popperjs/core/lib/typest * from "@popperjs/core/lib/types";
declare@popperjs/core/lib/modifiers/popperOffsets(import("@popperjs/core/lib/modifie@popperjs/core/lib/modifiers/flip").PopperOffsetsModifier |@popperjs/core/lib/modifiers/hidejs/core/lib/modifiers/flip@popperjs/core/lib/modifiers/offsetimport("@popperjs/core/lib/m@popperjs/core/lib/modifiers/eventListenerser | import("@popperjs/core/lib/modi@popperjs/core/lib/modifiers/computeStylesfier | import("@popperjs/core/lib/m@popperjs/core/lib/modifiers/arrowteners").EventListenersModi@popperjs/core/lib/modifiers/preventOverflowre/lib/modifiers/computeStyles").Comp@popperjs/core/lib/modifiers/applyStylesort("@popperjs/core/lib/modifiers/arrow").ArrowModifier | import("@popperjs/core/lib/modif@popperjs/core/lib/typeseventOverflow").PreventOverflowModifier | import("@po@popperjs/core/lib/typescore/lib/modifiers/applyStyles").ApplyStylesModifier)[];
declare c@popperjs/core/lib/typeseatePopper: <TModifier extends Partial<imp@popperjs/core/lib/typesopperjs/core/lib/types").Modifier<any, any>>>(reference: Element | import("@popperjs/core/lib/types").VirtualElement, popper: HTMLElement, @popperjs/core/lib/popper-litetial<import("@popp@popperjs/core/lib/modifiersib/types").OptionsGeneric<TModifier>>) => import("@popperjs/core/lib/types").Instance;
export { createPopper, popperGenerator, defaultModifiers, detectOverflow };
export { createPopper as createPopperLite } from "@popperjs/core/lib/popper-lite";
export * from "@popperjs/core/lib/modifiers";
